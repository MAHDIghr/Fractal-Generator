# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer

import os
from pathlib import Path
import imageGenerateur
import animationGenerateur
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage

#================================================================================
#                    VARIABLES GLOBAL POUR L'INTERFACE 
#================================================================================

# Génération d'annimation de fractale de julia 

#initialisation 
xC_anim_julia = 0.2
yC_anim_julia = -0.255
resolution_anim_julia = 240
nbFrames_anim_julia = 50
num_type_animation = 1
couleurs_anim_julia = 'hot'

# Génération d'image de fractale de julia

xC_image_julia = 0.2
yC_image_julia = -0.255
resolution_image_julia = 360
couleur_image_julia = 'hot'

# Génération d'animation de fractale de mandelbrot
nbFrames_anim_mandel = 50
resolution_anim_mandel = 360
couleur_anim_mandel = 'hot'

# Génération d'image de fractale de mandelbrot
resolution_image_mandel = 360
couleur_image_mandel = 'hot'

#==================================================================



#OUTPUT_PATH = Path(__file__).parent
#ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\PC\Downloads\projet math info\build\assets\frame0")
current_dir = os.getcwd()
ASSETS_PATH = Path(current_dir) / "assets" / "frame0"

def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

window = Tk()

window.geometry("1385x850")
window.configure(bg = "#FFFFFF")

canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 860,
    width = 1385,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    715.0,
    445.0,
    image=image_image_1
)


#================ TextBox ===================================
entry_image_11 = PhotoImage(
    file=relative_to_assets("entry_11.png"))
entry_bg_11 = canvas.create_image(
    373.5,
    373.5,
    image=entry_image_11
)
entry_11 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_11.place(
    x=348.0,
    y=363.0,
    width=51.0,
    height=19.0
)

entry_image_10 = PhotoImage(
    file=relative_to_assets("entry_10.png"))
entry_bg_10 = canvas.create_image(
    793.5,
    382.5,
    image=entry_image_10
)
entry_10 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_10.place(
    x=768.0,
    y=372.0,
    width=51.0,
    height=19.0
)


entry_image_9 = PhotoImage(
    file=relative_to_assets("entry_9.png"))
entry_bg_9 = canvas.create_image(
    790.5,
    265.5,
    image=entry_image_9
)
entry_9 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_9.place(
    x=765.0,
    y=255.0,
    width=51.0,
    height=19.0
)


entry_image_8 = PhotoImage(
    file=relative_to_assets("entry_8.png"))
entry_bg_8 = canvas.create_image(
    375.5,
    295.5,
    image=entry_image_8
)
entry_8 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_8.place(
    x=350.0,
    y=285.0,
    width=51.0,
    height=19.0
)


entry_image_7 = PhotoImage(
    file=relative_to_assets("entry_7.png"))
entry_bg_7 = canvas.create_image(
    49.5,
    374.5,
    image=entry_image_7
)
entry_7 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_7.place(
    x=24.0,
    y=364.0,
    width=51.0,
    height=19.0
)


entry_image_6 = PhotoImage(
    file=relative_to_assets("entry_6.png"))
entry_bg_6 = canvas.create_image(
    447.5,
    677.5,
    image=entry_image_6
)
entry_6 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_6.place(
    x=422.0,
    y=667.0,
    width=51.0,
    height=19.0
)


entry_image_5 = PhotoImage(
    file=relative_to_assets("entry_5.png"))
entry_bg_5 = canvas.create_image(
    139.5,
    265.0,
    image=entry_image_5
)
entry_5 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_5.place(
    x=112.0,
    y=254.0,
    width=55.0,
    height=20.0
)


entry_image_4 = PhotoImage(
    file=relative_to_assets("entry_4.png"))
entry_bg_4 = canvas.create_image(
    47.5,
    265.0,
    image=entry_image_4
)
entry_4 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_4.place(
    x=22.0,
    y=254.0,
    width=51.0,
    height=20.0
)


entry_image_3 = PhotoImage(
    file=relative_to_assets("entry_3.png"))
entry_bg_3 = canvas.create_image(
    791.5,
    675.5,
    image=entry_image_3
)
entry_3 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_3.place(
    x=766.0,
    y=665.0,
    width=51.0,
    height=19.0
)


entry_image_2 = PhotoImage(
    file=relative_to_assets("entry_2.png"))
entry_bg_2 = canvas.create_image(
    141.5,
    672.5,
    image=entry_image_2
)
entry_2 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_2.place(
    x=114.0,
    y=662.0,
    width=55.0,
    height=19.0
)

entry_image_1 = PhotoImage(
    file=relative_to_assets("entry_1.png"))
entry_bg_1 = canvas.create_image(
    49.5,
    672.5,
    image=entry_image_1
)
entry_1 = Entry(
    bd=0,
    bg="#F2F3B5",
    fg="#000716",
    highlightthickness=0
)
entry_1.place(
    x=24.0,
    y=662.0,
    width=51.0,
    height=19.0
)
#======================================================================
#                   Event handlers 
#======================================================================
def gestion_erreurs_choixResolution(partieConcernee) : 
    global resolution_anim_julia
    global resolution_image_julia
    global resolution_anim_mandel
    global resolution_image_mandel
    if partieConcernee == 1 :
        resolution_anim_julia = 360
        print("Choix resolution = 360p par defaut")
    elif partieConcernee == 2 :
        resolution_image_julia = 360
        print("Choix resolution = 360p par defaut")
    elif partieConcernee == 3 :
        resolution_anim_mandel = 360
        print("Choix resolution = 360p par defaut")
    else :
        resolution_image_mandel = 360
        print("Choix resolution = 360p par defaut")
    
def handel_envent_choixReselution(partieConcernee) :
    global resolution_anim_julia
    global resolution_image_julia
    global resolution_anim_mandel
    global resolution_image_mandel
    resolutionMax = 1025
    if partieConcernee == 1 :
        try :
            if int(entry_7.get()) < resolutionMax :
                resolution_anim_julia = int(entry_7.get())
            else :
               int('rentre dans l exception')  #instruction invalide pour generer une exception
        except :
            gestion_erreurs_choixResolution(1)
    elif partieConcernee == 2 :
        try :
            if int(entry_6.get()) < resolutionMax :
                resolution_image_julia = int(entry_6.get())
            else :
               int('rentre dans l exception')  #instruction invalide pour generer une exception
        except :
            gestion_erreurs_choixResolution(2)
    elif partieConcernee == 3:
        try :
            if int(entry_10.get()) < resolutionMax :
                resolution_anim_mandel = int(entry_10.get())
            else :
               int('rentre dans l exception')  #instruction invalide pour generer une exception 
        except :
            gestion_erreurs_choixResolution(3)
    else :
        try :
            if int(entry_3.get()) < resolutionMax :
                resolution_image_mandel = int(entry_3.get())
            else :
                int('rentre dans l exception')  #instruction invalide pour generer une exception
        except :
            print("je suis en exception")
            gestion_erreurs_choixResolution(4)
            
def handel_event_selectionerPaletteCouleur(partieConcernee, palette) : 
    global couleurs_anim_julia
    global couleur_image_julia
    global couleur_anim_mandel
    global couleur_image_mandel
    if partieConcernee == 1:
        couleurs_anim_julia = palette
    elif partieConcernee == 2:
        couleur_image_julia = palette
    elif partieConcernee == 3:
        couleur_anim_mandel = palette
    elif partieConcernee == 4:
        couleur_image_mandel = palette
    else:
        print("erreur choix partie")
         
def gerer_erreur_saisirNombreComplexe(partieConcernee, xOuY) :
    global xC_anim_julia
    global yC_anim_julia
    global xC_image_julia
    global yC_image_julia
    if partieConcernee == 1 and xOuY == 'x':
        xC_anim_julia = 0.2
        print("xC = 0.2   par defaut")
    elif partieConcernee == 1 and xOuY == 'y':
        yC_anim_julia = -0.255
        print("yC = -0.255   par defaut")
    elif partieConcernee == 2 and xOuY == 'x' :
        xC_image_julia = 0.2
        print("xC = -0.2   par defaut")
    else :
        yC_image_julia = -0.255
        print("yC = -0.255   par defaut")
        
#fonction pour convertire 
def convert_int_float(nombre) : 
    try:
        entier = int(nombre)
        return entier
    except :
        pass
    try:
        # Tenter de convertir en flottant
        flottant = float(nombre)
        return flottant
    except :  
        return 'erreur'

def handel_event_saisirNbComplexe(partieConcernee) :
    global xC_anim_julia
    global yC_anim_julia
    global xC_image_julia
    global yC_image_julia
    if partieConcernee == 1 : 
        xC_anim_julia = convert_int_float(entry_4.get())
        yC_anim_julia = convert_int_float(entry_5.get())
        if xC_anim_julia == 'erreur' :
            gerer_erreur_saisirNombreComplexe(1, 'x')
        if yC_anim_julia == 'erreur' :
            gerer_erreur_saisirNombreComplexe(1, 'y')
    else : 
        xC_image_julia = convert_int_float(entry_1.get())
        yC_image_julia = convert_int_float(entry_2.get())
        
        if xC_image_julia == 'erreur' :
            gerer_erreur_saisirNombreComplexe(2, 'x')
        if yC_image_julia == 'erreur' :
            gerer_erreur_saisirNombreComplexe(2, 'y')
    
def gerer_erreur_saisirNbFrames(partieConcernee) :
    global nbFrames_anim_julia
    global nbFrames_anim_mandel
    if partieConcernee == 1 :
        nbFrames_anim_julia = 50
        print("nb frames par defaut = 50")
    else :
        nbFrames_anim_mandel = 50
        print("nb frames par defaut = 50")
    
    
def handel_event_saisirNbFrames(partieConcernee) :
    global nbFrames_anim_julia
    global nbFrames_anim_mandel
    if partieConcernee == 1 :    
        try :
            if int(entry_11.get()) < 201 : 
                nbFrames_anim_julia = int(entry_11.get())
            else :
                int('rentre dans l exception')  #instruction invalide pour generer une exception
        except :
            gerer_erreur_saisirNbFrames(1)
    else : 
        try :
            if int(entry_9.get()) < 201 : 
                nbFrames_anim_mandel = int(entry_9.get())
            else :
                int('rentre dans l exception')  #instruction invalide pour generer une exception
        except :
            gerer_erreur_saisirNbFrames(3)
  
def gestion_erreur_choixAnimationJulia() :
    global num_type_animation
    num_type_animation = 1 #choix par defaut
    print("choix num animation = 1 par defaut")
    
def handel_event_choixAnimationJulia() :
    global num_type_animation 
    try :
        if int(entry_8.get()) == 1 or int(entry_8.get()) == 2 : 
            num_type_animation = int(entry_8.get())
        else : 
            int('rentre dans l exception')  #instruction invalide pour generer une exception
    except : 
        gestion_erreur_choixAnimationJulia()
    
def handel_event_telecharger_animationJulia_cerculaire() : 
    handel_event_saisirNbComplexe(1)
    handel_envent_choixReselution(1)
    handel_event_choixAnimationJulia()
    handel_event_saisirNbFrames(1)
    animationGenerateur.generer_animation_cercle_Julia(complex(xC_anim_julia,yC_anim_julia),resolution_anim_julia,couleurs_anim_julia,'save')

def handel_event_Afficher_animationJulia_cerculaire() : 
    handel_event_saisirNbComplexe(1)
    handel_envent_choixReselution(1)
    handel_event_choixAnimationJulia()
    handel_event_saisirNbFrames(1)
    animationGenerateur.generer_animation_cercle_Julia(complex(xC_anim_julia,yC_anim_julia),resolution_anim_julia,couleurs_anim_julia,'show')
    
def handel_event_telecharger_animationJulia_resolution() : 
    handel_event_saisirNbComplexe(1)
    handel_envent_choixReselution(1)
    handel_event_saisirNbFrames(1)
    animationGenerateur.generer_animation_fractale_julia_resolution(resolution_anim_julia,couleurs_anim_julia,xC_anim_julia,yC_anim_julia,nbFrames_anim_julia,'save')
     
def handel_event_Afficher_animationJulia_resolution() : 
    handel_event_saisirNbComplexe(1)
    handel_envent_choixReselution(1)
    handel_event_saisirNbFrames(1)
    animationGenerateur.generer_animation_fractale_julia_resolution(resolution_anim_julia,couleurs_anim_julia,xC_anim_julia,yC_anim_julia,nbFrames_anim_julia,'show')

def handel_event_choixAnimationJulia_pourTelechargement() : 
    handel_event_choixAnimationJulia()
    if num_type_animation == 2 :
        handel_event_telecharger_animationJulia_resolution()
    else : 
        handel_event_telecharger_animationJulia_cerculaire()
        
def handel_event_choixAnimationJulia_pourAffichage() : 
    handel_event_choixAnimationJulia()
    if num_type_animation == 2 :
        handel_event_Afficher_animationJulia_resolution()
    else : 
        handel_event_Afficher_animationJulia_cerculaire()
        
def handel_event_telecharger_imageJulia() : 
    handel_event_saisirNbComplexe(2)
    handel_envent_choixReselution(2)
    print("\nl'image sera générée avec les parametres suivants :\n"
          "\nResolution = ", resolution_image_julia,
          "\nxC = ",xC_image_julia,
          "\nyC = ",yC_image_julia,
          "\nPalette de couleur = ", couleur_image_julia)
    imageGenerateur.generer_fractale_de_julia(resolution_image_julia,xC_image_julia,yC_image_julia,'save',couleur_image_julia)

def handel_event_afficher_imageJulia() :
    handel_event_saisirNbComplexe(2)
    handel_envent_choixReselution(2)
    print("\nl'image sera générée avec les parametres suivants :\n"
          "\nResolution = ", resolution_image_julia,
          "\nxC = ",xC_image_julia,
          "\nyC = ",yC_image_julia,
          "\nPalette de couleur = ", couleur_image_julia)
    imageGenerateur.generer_fractale_de_julia(resolution_image_julia,xC_image_julia,yC_image_julia,'show',couleur_image_julia)
    
def handel_event_telecharger_imageMandelbrot() :
    handel_envent_choixReselution(4)
    imageGenerateur.generer_fractale_de_mandelbrot(resolution_image_mandel,'save', couleur_image_mandel)

def handel_event_afficher_imageMandelbrot() :
    handel_envent_choixReselution(4)  
    imageGenerateur.generer_fractale_de_mandelbrot(resolution_image_mandel,'show', couleur_image_mandel)
    
def handel_event_telecharger_animationMandelbrot() :
    handel_envent_choixReselution(3)
    handel_event_saisirNbFrames(3)
    animationGenerateur.generer_animation_fractale_multibrot(nbFrames_anim_mandel,resolution_anim_mandel,couleur_anim_mandel,'save')
    
def handel_event_afficher_animationMandelbrot() :  
    handel_envent_choixReselution(3)
    handel_event_saisirNbFrames(3)
    animationGenerateur.generer_animation_fractale_multibrot(nbFrames_anim_mandel,resolution_anim_mandel,couleur_anim_mandel,'show')

#=======================================================================
#               Textes 
#========================================================================

canvas.create_text(
    502.0,
    16.0,
    anchor="nw",
    text="fractal generator",
    fill="#FFFFFF",
    font=("IrishGrover Regular", 48 * -1)
)

canvas.create_text(
    61.0,
    75.0,
    anchor="nw",
    text="Fractale de Julia ",
    fill="#FFFFFF",
    font=("IrishGrover Regular", 48 * -1)
)

canvas.create_text(
    863.0,
    75.0,
    anchor="nw",
    text="Fractale de Mandelbrot",
    fill="#FFFFFF",
    font=("IrishGrover Regular", 48 * -1)
)

canvas.create_text(
    10.0,
    162.0,
    anchor="nw",
    text="Générer une annimation : ",
    fill="#8AFBE7",
    font=("IrishGrover Regular", 32 * -1)
)

canvas.create_text(
    15.0,
    569.0,
    anchor="nw",
    text="Générer fractale .PNG (Image) : ",
    fill="#8AFBE7",
    font=("IrishGrover Regular", 32 * -1)
)

canvas.create_text(
    745.0,
    162.0,
    anchor="nw",
    text="Générer une annimation :",
    fill="#98CBD6",
    font=("IrishGrover Regular", 32 * -1)
)

canvas.create_text(
    16.0,
    616.0,
    anchor="nw",
    text="Saisire un nombre complexe :",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    10.0,
    710.0,
    anchor="nw",
    text="Sélectionner la palette des couleurs   :",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    721.0,
    710.0,
    anchor="nw",
    text="Sélectionner la palette des couleurs   :",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    88.0,
    656.0,
    anchor="nw",
    text="+",
    fill="#FFFFFF",
    font=("InriaSans Bold", 24 * -1)
)

canvas.create_text(
    196.0,
    657.0,
    anchor="nw",
    text="i",
    fill="#FFFFFF",
    font=("InriaSans Bold", 24 * -1)
)

canvas.create_text(
    14.0,
    208.0,
    anchor="nw",
    text="Saisire un nombre complexe :",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    336.0,
    208.0,
    anchor="nw",
    text="Saisir le numéro du type :\n\n\n\n",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    753.0,
    208.0,
    anchor="nw",
    text="Saisir le nombre de frames  :  (le temps de l’animation)\n\n\n\n",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    337.0,
    245.0,
    anchor="nw",
    text="Circulaire (1)         Par résolution (2)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    86.0,
    249.0,
    anchor="nw",
    text="+",
    fill="#FFFFFF",
    font=("InriaSans Bold", 24 * -1)
)

canvas.create_text(
    194.0,
    250.0,
    anchor="nw",
    text="i",
    fill="#FFFFFF",
    font=("InriaSans Bold", 24 * -1)
)

canvas.create_text(
    840.0,
    665.0,
    anchor="nw",
    text="P     (360 par défaut)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    755.0,
    422.0,
    anchor="nw",
    text="Sélectionner la palette des couleurs   :",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)


canvas.create_text(
    15.0,
    431.0,
    anchor="nw",
    text="Sélectionner la palette des couleurs   :",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    724.0,
    616.0,
    anchor="nw",
    text="Resolution  :      (50 <  res < 2048) ",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    496.0,
    667.0,
    anchor="nw",
    text="P     (360 par défaut)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    380.0,
    618.0,
    anchor="nw",
    text="Resolution  :      (50 <  res < 2048) ",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)


canvas.create_text(
    92.0,
    363.0,
    anchor="nw",
    text="P     (360 par défaut)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    358.0,
    522.0,
    anchor="nw",
    text="(par Df)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    1079.0,
    796.0,
    anchor="nw",
    text="(par Df)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    346.0,
    803.0,
    anchor="nw",
    text="(par Df)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    1090.0,
    512.0,
    anchor="nw",
    text="(par Df)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    10.0,
    314.0,
    anchor="nw",
    text="Resolution  :      (50 <  res < 2048) ",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)


canvas.create_text(
    836.0,
    371.0,
    anchor="nw",
    text="P     (360 par défaut)",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    842.0,
    252.0,
    anchor="nw",
    text="Frames",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    336.0,
    314.0,
    anchor="nw",
    text="Saisir le nombre de frames  :  \n\n\n\n",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    425.0,
    360.0,
    anchor="nw",
    text="Frames",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    754.0,
    322.0,
    anchor="nw",
    text="Resolution  :      (50 <  res < 2048) ",
    fill="#FFFFFF",
    font=("InriaSans Bold", 20 * -1)
)

canvas.create_text(
    724.0,
    569.0,
    anchor="nw",
    text="Générer fractale .PNG (Image) : ",
    fill="#8AFBE7",
    font=("IrishGrover Regular", 32 * -1)
)

#===========================================
#         Rectangles 
#===========================================

canvas.create_rectangle(
    716.0,
    97.0,
    716.0,
    890.0630493164062,
    fill="#000000",
    outline="")

canvas.create_rectangle(
    62.0,
    126.0,
    423.9999746627054,
    128.00557097247201,
    fill="#FFFFFF",
    outline="")

canvas.create_rectangle(
    869.0,
    125.0,
    1380.9996725593228,
    128.0814650385637,
    fill="#FFFFFF",
    outline="")

#===================================================
#           Boutons
#===================================================
button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=handel_event_choixAnimationJulia_pourTelechargement,
    relief="flat"
)
button_1.place(
    x=452.0,
    y=458.18310546875,
    width=106.0,
    height=87.47534942626953
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command= handel_event_telecharger_imageJulia,
    relief="flat"
)
button_2.place(
    x=456.0,
    y=748.4859008789062,
    width=93.0,
    height=86.51408386230469
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=handel_event_choixAnimationJulia_pourAffichage,
    relief="flat"
)
button_3.place(
    x=558.0,
    y=471.6408386230469,
    width=80.0,
    height=74.01760864257812
)

button_image_4 = PhotoImage(
    file=relative_to_assets("button_4.png"))
button_4 = Button(
    image=button_image_4,
    borderwidth=0,
    highlightthickness=0,
    command=handel_event_afficher_imageJulia,
    relief="flat"
)
button_4.place(
    x=558.0,
    y=760.0211181640625,
    width=80.0,
    height=73.05633544921875
)

button_image_5 = PhotoImage(
    file=relative_to_assets("button_5.png"))
button_5 = Button(
    image=button_image_5,
    borderwidth=0,
    highlightthickness=0,
    command=handel_event_telecharger_animationMandelbrot,
    relief="flat"
)
button_5.place(
    x=1206.0,
    y=461.0,
    width=83.0,
    height=87.47534942626953
)

button_image_6 = PhotoImage(
    file=relative_to_assets("button_6.png"))
button_6 = Button(
    image=button_image_6,
    borderwidth=0,
    highlightthickness=0,
    command=handel_event_telecharger_imageMandelbrot,
    relief="flat"
)
button_6.place(
    x=1211.0,
    y=747.524658203125,
    width=101.0,
    height=86.51408386230469
)

button_image_7 = PhotoImage(
    file=relative_to_assets("button_7.png"))
button_7 = Button(
    image=button_image_7,
    borderwidth=0,
    highlightthickness=0,
    command=handel_event_afficher_animationMandelbrot,
    relief="flat"
)
button_7.place(
    x=1289.0,
    y=464.0,
    width=96.0,
    height=74.0
)

button_image_8 = PhotoImage(
    file=relative_to_assets("button_8.png"))
button_8 = Button(
    image=button_image_8,
    borderwidth=0,
    highlightthickness=0,
    command=handel_event_afficher_imageMandelbrot,
    relief="flat"
)
button_8.place(
    x=1305.0,
    y=763.0,
    width=84.0,
    height=69.0
)

button_image_9 = PhotoImage(
    file=relative_to_assets("button_9.png"))
button_9 = Button(
    image=button_image_9,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(2,'viridis'),
    relief="flat"
)
button_9.place(
    x=256.0,
    y=795.0,
    width=85.0,
    height=36.0
)

button_image_10 = PhotoImage(
    file=relative_to_assets("button_10.png"))
button_10 = Button(
    image=button_image_10,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(4,'viridis'),
    relief="flat"
)
button_10.place(
    x=989.0,
    y=793.0,
    width=85.0,
    height=36.0
)

button_image_11 = PhotoImage(
    file=relative_to_assets("button_11.png"))
button_11 = Button(
    image=button_image_11,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(2,'palsma'),
    relief="flat"
)
button_11.place(
    x=131.0,
    y=795.0,
    width=85.0,
    height=36.0
)

button_image_12 = PhotoImage(
    file=relative_to_assets("button_12.png"))
button_12 = Button(
    image=button_image_12,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(2,'spring'),
    relief="flat"
)
button_12.place(
    x=256.0,
    y=738.0,
    width=85.0,
    height=36.0
)

button_image_13 = PhotoImage(
    file=relative_to_assets("button_13.png"))
button_13 = Button(
    image=button_image_13,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(4,'spring'),
    relief="flat"
)
button_13.place(
    x=989.0,
    y=736.0,
    width=85.0,
    height=36.0
)

button_image_14 = PhotoImage(
    file=relative_to_assets("button_14.png"))
button_14 = Button(
    image=button_image_14,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(2,'bone'),
    relief="flat"
)
button_14.place(
    x=131.0,
    y=738.0,
    width=85.0,
    height=36.0
)

button_image_15 = PhotoImage(
    file=relative_to_assets("button_15.png"))
button_15 = Button(
    image=button_image_15,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(2,'cool'),
    relief="flat"
)
button_15.place(
    x=5.0,
    y=794.0,
    width=85.0,
    height=36.0
)

button_image_16 = PhotoImage(
    file=relative_to_assets("button_16.png"))
button_16 = Button(
    image=button_image_16,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(2,'magma'),
    relief="flat"
)
button_16.place(
    x=5.0,
    y=737.9119873046875,
    width=85.0,
    height=36.0
)

button_image_17 = PhotoImage(
    file=relative_to_assets("button_17.png"))
button_17 = Button(
    image=button_image_17,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(3,'viridis'),
    relief="flat"
)
button_17.place(
    x=1000.0,
    y=509.0,
    width=85.0,
    height=36.0
)

button_image_18 = PhotoImage(
    file=relative_to_assets("button_18.png"))
button_18 = Button(
    image=button_image_18,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(3,'plasma'),
    relief="flat"
)
button_18.place(
    x=875.0,
    y=509.0,
    width=85.0,
    height=36.0
)

button_image_19 = PhotoImage(
    file=relative_to_assets("button_19.png"))
button_19 = Button(
    image=button_image_19,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(3,'spring'),
    relief="flat"
)
button_19.place(
    x=1000.0,
    y=452.0,
    width=85.0,
    height=36.0
)

button_image_20 = PhotoImage(
    file=relative_to_assets("button_20.png"))
button_20 = Button(
    image=button_image_20,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(3,'bone'),
    relief="flat"
)
button_20.place(
    x=875.0,
    y=452.0,
    width=85.0,
    height=36.0
)

button_image_21 = PhotoImage(
    file=relative_to_assets("button_21.png"))
button_21 = Button(
    image=button_image_21,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(3,'cool'),
    relief="flat"
)
button_21.place(
    x=750.0,
    y=509.0,
    width=85.0,
    height=36.0
)

button_image_22 = PhotoImage(
    file=relative_to_assets("button_22.png"))
button_22 = Button(
    image=button_image_22,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(3,'magma'),
    relief="flat"
)
button_22.place(
    x=750.0,
    y=452.0,
    width=85.0,
    height=36.0
)

button_image_23 = PhotoImage(
    file=relative_to_assets("button_23.png"))
button_23 = Button(
    image=button_image_23,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(1,'viridis'),
    relief="flat"
)
button_23.place(
    x=261.0,
    y=516.0,
    width=85.0,
    height=36.0
)

button_image_24 = PhotoImage(
    file=relative_to_assets("button_24.png"))
button_24 = Button(
    image=button_image_24,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(1,'plasma'),
    relief="flat"
)
button_24.place(
    x=136.0,
    y=516.0,
    width=85.0,
    height=36.0
)

button_image_25 = PhotoImage(
    file=relative_to_assets("button_25.png"))
button_25 = Button(
    image=button_image_25,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(1,'spring'),
    relief="flat"
)
button_25.place(
    x=261.0,
    y=460.0,
    width=85.0,
    height=36.0
)

button_image_26 = PhotoImage(
    file=relative_to_assets("button_26.png"))
button_26 = Button(
    image=button_image_26,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(1,'bone'),
    relief="flat"
)
button_26.place(
    x=136.0,
    y=460.0,
    width=85.0,
    height=36.0
)

button_image_27 = PhotoImage(
    file=relative_to_assets("button_27.png"))
button_27 = Button(
    image=button_image_27,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(1,'cool'),
    relief="flat"
)
button_27.place(
    x=10.0,
    y=515.0,
    width=85.0,
    height=36.0
)

button_image_28 = PhotoImage(
    file=relative_to_assets("button_28.png"))
button_28 = Button(
    image=button_image_28,
    borderwidth=0,
    highlightthickness=0,
    command=lambda : handel_event_selectionerPaletteCouleur(1,'magma'),
    relief="flat"
)
button_28.place(
    x=10.0,
    y=459.1443786621094,
    width=85.0,
    height=36.0
)

button_image_29 = PhotoImage(
    file=relative_to_assets("button_29.png"))
button_29 = Button(
    image=button_image_29,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(4,'plasma'),
    relief="flat"
)
button_29.place(
    x=867.0,
    y=793.0,
    width=85.0,
    height=36.0
)

button_image_30 = PhotoImage(
    file=relative_to_assets("button_30.png"))
button_30 = Button(
    image=button_image_30,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(4,'bone'),
    relief="flat"
)
button_30.place(
    x=867.0,
    y=736.0,
    width=85.0,
    height=36.0
)

button_image_31 = PhotoImage(
    file=relative_to_assets("button_31.png"))
button_31 = Button(
    image=button_image_31,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(4,'cool'),
    relief="flat"
)
button_31.place(
    x=744.0,
    y=792.0,
    width=85.0,
    height=36.0
)

button_image_32 = PhotoImage(
    file=relative_to_assets("button_32.png"))
button_32 = Button(
    image=button_image_32,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: handel_event_selectionerPaletteCouleur(4,'magma'),
    relief="flat"
)
button_32.place(
    x=744.0,
    y=735.9894409179688,
    width=85.0,
    height=36.0
)

window.resizable(False, False)
window.mainloop()


